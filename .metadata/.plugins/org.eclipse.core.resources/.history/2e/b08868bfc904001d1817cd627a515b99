
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

class pair<T, V> {
	public T first;
	public V second;
}

class boolInt {
	int height;
	boolean balanced;
}

class intBool {
	boolean isSum;
	int sum;
}

class lengthSum {
	int length;
	int sum;
}

public class BinaryTreeUse {

	public static void main(String[] args) {

		//		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(1);
		//		BinaryTreeNode<Integer> node1 = new BinaryTreeNode<>(2);
		//		BinaryTreeNode<Integer> node2 = new BinaryTreeNode<>(3);
		//		
		//		root.left = node1;
		//		root.right = node2;

		//		Scanner s = new Scanner(System.in);
		//		BinaryTreeNode<Integer> root = takeInput(s);
		//		printTree(root);
		//		s.close();
		// BinaryTreeNode<Integer> root = takeInputLevelWise();
		// printTree(root);
		// printLevelWise(root);
		// System.out.println(countNodes(root));
		// System.out.println( findNode( root, 5 ));
		// System.out.println(height(root));
		// System.out.println("diameter: " + diameter(root));
		// System.out.println("diameter: " + heightDiameter(root).second);
		// System.out.println("Height: " + heightDiameter(root).first);
		// inorder(root);
		// preorder(root);
		// postorder(root);
		// levelOrder(root);
		// System.out.println(checkBalanced(root));
		// printZigZag( root );
		// insert( root, 50 );
		// nthNodeOfInorder(root, 4);
		// System.out.println(isFoldable( root ) );
		// System.out.println(minDepth(root));
		//		String str = "AB+EF*G*-";
		//		inorder(constructTree(str));
		// System.out.println(heightIterative(root));
		// deepestNode( root );
		// System.out.println( longestPathSum( root ));
		// System.out.println(largsetSubtreeSum(root));
		// System.out.println(checkLeafLevel(root));
		// System.out.println(isSumTree(root));
		// System.out.println(isPerfect(root));
		// System.out.println(largsetSubtreeSum(root));
		// reverseLevelOrder(root);
		// System.out.println(sumOfLeaf(root));
	}

	//======================================================================
	// Taking Input Recursively
	public static BinaryTreeNode<Integer> takeInput(Scanner s) {

		System.out.println("Enter the Root Data ");
		int rootData = s.nextInt();
		if (rootData == -1) { // base case
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootData);
		root.left = takeInput(s);
		root.right = takeInput(s);

		return root;
	}

	//=========================================================================
	// Printing Tree Recursively
	public static void printTree(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		String toBePrinted = root.data + " : ";
		if (root.left != null) {
			toBePrinted += "L" + root.left.data + ", ";
		}
		if (root.right != null) {
			toBePrinted += "R" + root.right.data;
		}
		System.out.println(toBePrinted);
		printTree(root.left);
		printTree(root.right);

	}

	//==================================================================================
	// find number of nodes
	public static int countNodes(BinaryTreeNode<Integer> root) {

		if (root == null) { // base case
			return 0;
		}

		int count = 1;

		count += countNodes(root.left);
		count += countNodes(root.right);
		return count;

	}

	//===============================================================================
	// find height or depth of a tree
	public static int height(BinaryTreeNode<Integer> root) {

		if (root == null) { // base case
			return 0;
		}

		int smallAns1 = height(root.left);
		int smallAns2 = height(root.right);

		// return 1 + Math.max(smallAns1, smallAns2);

		if (smallAns1 > smallAns2) {
			return 1 + smallAns1;
		} else {
			return 1 + smallAns2;
		}
	}

	//===============================================================================
	//	Mirror the given binary tree. That is, 
	//	right child of every nodes should become left and left should become right.
	//	1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
	//	Sample Output 1:
	//	1 
	//	3 2 
	//	7 6 5 4

	public static void mirror(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		if (root.left != null && root.right != null) {
			BinaryTreeNode<Integer> temp = root.left;
			root.left = root.right;
			root.right = temp;
		} else if (root.left == null && root.right != null) {
			root.left = root.right;
			root.right = null;
		} else if (root.left != null && root.right == null) {
			root.right = root.left;
			root.left = null;
		} else {
			return;
		}
		mirror(root.left);
		mirror(root.right);
	}
	//=============================================================================
	//	Check if two trees are Mirror
	//	Given two Binary Trees, write a function that returns true
	//	if two trees are mirror of each other, else false.
	//	For example, the function should return true for following input trees.

	public static boolean areMirror(BinaryTreeNode<Integer> a, BinaryTreeNode<Integer> b) {

		if (a == null && b == null) { // base case
			return true;
		}
		if (a == null || b == null) { // if one has node second doesn't
			return false; // or second has one doesn't
		}

		if (a.data != b.data) {
			return false;
		}
		boolean smallAns1 = areMirror(a.left, b.right);
		if (smallAns1 == false) {
			return false;
		}
		boolean smallAns2 = areMirror(a.right, b.left);
		if (smallAns2 == false) {
			return false;
		}

		return true;
	}
	//==================================================================================
	//		Insertion in a Binary Tree in level order
	//		Given a binary tree and a key, insert the key into the binary tree 
	//		at first position available in level order.

	public static void insert(BinaryTreeNode<Integer> root, int key) {

		if (root == null) {
			BinaryTreeNode<Integer> ans = new BinaryTreeNode<>(key);
			return;
		}
		if (root.left != null && root.right == null) {
			root.right = new BinaryTreeNode<>(key);
			return;
		} else if (root.left == null && root.right != null) {
			root.left = new BinaryTreeNode<>(key);
			return;
		} else {
			insert(root.left, key);
			insert(root.right, key);
		}
	}


	// ================================================================================
	//	How to determine if a binary tree is height-balanced?
	//			A tree where no leaf is much farther away from the root than 
	//			any other leaf. Different balancing schemes allow different 
	//			definitions of “much farther” and different amounts of work
	//			to keep them balanced.
	//			Consider a height-balancing scheme where following conditions
	//			should be checked to determine if a binary tree is balanced.
	//			An empty tree is height-balanced. A non-empty binary tree T
	//			is balanced if:
	//			1) Left subtree of T is balanced
	//			2) Right subtree of T is balanced
	//			3) The difference between heights of left subtree and right subtree
	//			is not more than 1.

	// But complexity of this code is o(n^2) as code is checking for balance
	// condition in which it is calculating height thn again calculating height.
	public static boolean isBalanced (BinaryTreeNode<Integer> root ) {
		if( root == null ) {
			return true;
		}

		boolean rAns = isBalanced( root.left );
		boolean lAns = isBalanced( root.right );
		int hLeft = height( root.left );
		int hRight = height( root.right );

		if( rAns == true && lAns == true && Math.abs(hLeft - hRight) <= 1 ) {
			return true;
		}
		return false;
	}

	// time complexity O(n)
	public static boolean isBalancedBetterApproach(BinaryTreeNode<Integer> root) {
		return helperBalanced(root).balanced;
	}

	public static boolInt helperBalanced(BinaryTreeNode<Integer> root) {

		if (root == null) {
			boolInt ans = new boolInt();
			ans.balanced = true;
			ans.height = 0;
			return ans;
		}

		boolInt smallAns1 = helperBalanced(root.left);
		boolInt smallAns2 = helperBalanced(root.right);

		int height = Math.max(smallAns1.height, smallAns2.height) + 1;

		boolInt ans = new boolInt();
		ans.height = height;
		if (smallAns1.balanced == false || smallAns2.balanced == false
				|| Math.abs(smallAns1.height - smallAns2.height) > 1) {
			ans.balanced = false;
			return ans;
		}
		ans.balanced = true;
		return ans;
	}
	//============================================================================
	// inorder preorder postorder traversal
	public static void inorder(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		inorder(root.left);
		System.out.print(root.data + " ");
		inorder(root.right);

	}

	public static void preorder(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		System.out.print(root.data + " ");
		preorder(root.left);
		preorder(root.right);

	}

	public static void postorder(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return;
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data + " ");

	}

	public static void levelOrder(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}

		Queue<BinaryTreeNode<Integer>> pendingNodes = new LinkedList<>();
		pendingNodes.add(root);
		pendingNodes.add(null);

		while (!pendingNodes.isEmpty()) {
			if (pendingNodes.peek() == null) {
				//Null is added in queue to change the line while printing basically
				System.out.println();
				pendingNodes.poll();
			} else {
				while (pendingNodes.peek() != null) {
					BinaryTreeNode<Integer> node = pendingNodes.poll();
					System.out.print(node.data + " ");
					if (node.left != null) {
						pendingNodes.add(node.left);
					}
					if (node.right != null) {
						pendingNodes.add(node.right);
					}
				}
				pendingNodes.add(null);
			}
		}
	}
	//================================================================================
	//		Inorder Tree Traversal without Recursion
	//		Using Stack is the obvious way to traverse tree without recursion. 
	//		Below is an algorithm for traversing binary tree using stack. 
	//		See this for step wise step execution of the algorithm.
	//		1) Create an empty stack S.
	//		2) Initialize current node as root
	//		3) Push the current node to S and set current = current->left until current is NULL
	//		4) If current is NULL and stack is not empty then 
	//		     a) Pop the top item from stack.
	//		     b) Print the popped item, set current = popped_item->right 
	//		     c) Go to step 3.
	//		5) If current is NULL and stack is empty then we are done.

	public static void inorderIteratively( BinaryTreeNode<Integer> root ) 
	{ 
		if (root == null) 
			return; 

		Stack<BinaryTreeNode<Integer>> s = new Stack<>(); 
		BinaryTreeNode<Integer> curr = root; 

		// traverse the tree 
		while (curr != null || s.size() > 0) 
		{ 

			/* Reach the left most Node of the curr Node */
			while (curr !=  null) 
			{ 
				/* place pointer to a tree node on the stack before traversing 
	                   				the node's left subtree */
				s.push(curr); 
				curr = curr.left; 
			} 

			/* Current must be NULL at this point */
			curr = s.pop(); 

			System.out.print(curr.data + " "); 

			/* we have visited the node and its  left subtree.  Now, it's right 
	               					subtree's turn */
			curr = curr.right; 
		} 
	}
	//================================================================================
	//		Remove Leaf nodes
	//		Remove all leaf nodes from a given Binary Tree. Leaf nodes are those nodes, 
	//		which don't have any children.
	//		Note : Root will also be a leaf node if it doesn't have left and right child.
	//		You don't need to print the tree, just remove all leaf nodes and return the updated root.
	//		Sample Input :
	//		8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
	//		Sample Output :
	//		8
	//		3 10
	//		6 14                    

	public static BinaryTreeNode<Integer> removeAllLeaves(BinaryTreeNode<Integer> root) {

		if (root == null) {
			return null;
		}
		if (root.left == null && root.right == null) {
			root = null;
			return root;
		}

		BinaryTreeNode<Integer> smallAns1 = removeAllLeaves(root.left);
		BinaryTreeNode<Integer> smallAns2 = removeAllLeaves(root.right);

		root.left = smallAns1;
		root.right = smallAns2;

		return root;

	}
	//===========================================================================================	
	/*
	 * Code: Construct Tree from Preorder and Inorder For a given preorder and
	 * inorder traversal of a Binary Tree of type integer stored in an array/list,
	 * create the binary tree using the given two arrays/lists. You just need to
	 * construct the tree and return the root.
	 */


	public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
			int[] in){

		// Write your code here
		return getTreeFromPreorderAndInorder(pre, 0, pre.length-1, in,0, in.length-1);
	}
	public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,int sPre ,int ePre,
			int[] in,int sIn,int eIn){

		if(sIn>eIn || sPre > ePre){
			return null;
		}

		//start index of pre order contains root
		int rootElement = pre[sPre];
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootElement);

		//Finding that root in in order
		int rootPos = -1;
		for(int i = sIn; i <= eIn; i++){
			if(in[i] == rootElement){
				//position of root element in in order
				rootPos = i;
			}
		}
		int count = rootPos - sIn;

		root.left = getTreeFromPreorderAndInorder(pre, sPre+1, sPre+count, in, sIn, rootPos-1);
		root.right = getTreeFromPreorderAndInorder(pre, sPre+count+1, ePre, in, rootPos+1, eIn);
		return root;

	}
	//==========================================================================================
}